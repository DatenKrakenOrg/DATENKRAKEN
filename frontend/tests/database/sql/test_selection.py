import pytest
from unittest import mock
from database.sql import engine as engine_module
from sqlalchemy.sql import select

@pytest.fixture(autouse=True)
def reset_globals():
    """
    Reset global variables
    """
    engine_module._engine = None
    engine_module._session_factory = None

def test_commit_select_session_factory_not_set(mocker):
    # --- Arrange ---
    mock_logging = mocker.patch("logging.critical")
    # --- Act & Assert ---
    with pytest.raises(RuntimeError):
        engine_module.commit_select(select())
        mock_logging.assert_has_calls()

def test_commit_select_scalar_session_factory_not_set(mocker):
    # --- Arrange ---
    mock_logging = mocker.patch("logging.critical")
    # --- Act & Assert ---
    with pytest.raises(RuntimeError):
        engine_module.commit_select_scalar(select())
        mock_logging.assert_has_calls()

# Following tests generated by ChatGPT (GPT-5 Thinking) and reviewed by a human.

def _install_session_factory_with_session(session):
    """
    Helper: installs a _session_factory that returns a context manager
    yielding the provided `session` mock.
    """
    # Build a context manager mock
    cm = mock.MagicMock()
    cm.__enter__.return_value = session
    cm.__exit__.return_value = None

    # _session_factory() should return that context manager
    factory = mock.MagicMock()
    factory.return_value = cm
    engine_module._session_factory = factory
    return factory, cm

def test_commit_select_success_returns_rows_and_logs_info(mocker):
    # Arrange
    stmt = select()
    mock_info = mocker.patch("logging.info")

    # Fake session + execute() -> .all() pipeline
    result = mock.MagicMock()
    result.all.return_value = [("r1",), ("r2",)]
    session = mock.MagicMock()
    session.execute.return_value = result

    factory, cm = _install_session_factory_with_session(session)

    # Act
    rows = engine_module.commit_select(stmt)

    # Assert
    assert rows == [("r1",), ("r2",)]
    session.execute.assert_called_once_with(stmt)
    result.all.assert_called_once()
    factory.assert_called_once()       # _session_factory()
    cm.__enter__.assert_called_once()  # context manager used
    mock_info.assert_called()          # info log on success


def test_commit_select_logs_error_on_exception_and_returns_none(mocker):
    # Arrange
    stmt = select()
    mock_error = mocker.patch("logging.error")

    session = mock.MagicMock()
    session.execute.side_effect = RuntimeError("A Exception")
    _install_session_factory_with_session(session)

    # Act
    rows = engine_module.commit_select(stmt)

    # Assert: function should swallow exception and return None
    assert rows is None
    session.execute.assert_called_once_with(stmt)
    mock_error.assert_called()  # error log expected


def test_commit_select_scalar_success_returns_values_and_logs_info(mocker):
    # Arrange
    stmt = select()
    mock_info = mocker.patch("logging.info")

    # Fake session + execute().scalars().all() pipeline
    scalars_obj = mock.MagicMock()
    scalars_obj.all.return_value = ["v1", "v2"]
    result = mock.MagicMock()
    result.scalars.return_value = scalars_obj

    session = mock.MagicMock()
    session.execute.return_value = result

    factory, cm = _install_session_factory_with_session(session)

    # Act
    values = engine_module.commit_select_scalar(stmt)

    # Assert
    assert values == ["v1", "v2"]
    session.execute.assert_called_once_with(stmt)
    result.scalars.assert_called_once()
    scalars_obj.all.assert_called_once()
    factory.assert_called_once()
    cm.__enter__.assert_called_once()
    mock_info.assert_called()


def test_commit_select_scalar_logs_error_on_exception_and_returns_none(mocker):
    # Arrange
    stmt = select()
    mock_error = mocker.patch("logging.error")

    session = mock.MagicMock()
    session.execute.side_effect = RuntimeError("A Exception")
    _install_session_factory_with_session(session)

    # Act
    values = engine_module.commit_select_scalar(stmt)

    # Assert
    assert values is None
    session.execute.assert_called_once_with(stmt)
    mock_error.assert_called()

